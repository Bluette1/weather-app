/**
 * StyleFix 1.0.3 & PrefixFree 1.0.7
 * @author Lea Verou
 * MIT license
 */
(function () {
  function m(a, b) { return [].slice.call((b || document).querySelectorAll(a)); }
  if (window.addEventListener) {
    var e = window.StyleFix = {
      link(a) {
        const b = a.href || a.getAttribute('data-href');
        try { if (!b || a.rel !== 'stylesheet' || a.hasAttribute('data-noprefix')) return; } catch (p) { return; }
        const d = b.replace(/[^\/]+$/, '');
        const f = (/^[a-z]{3,10}:/.exec(d) || [''])[0];
        const h = (/^[a-z]{3,10}:\/\/[^\/]+/.exec(d) || [''])[0];
        const k = /^([^?]*)\??/.exec(b)[1];
        const g = a.parentNode;
        let c = new XMLHttpRequest();
        let l;
        c.onreadystatechange = function () {
          c.readyState === 4
            && l();
        };
        l = function () {
          var b = c.responseText;
          if (b && a.parentNode && (!c.status || c.status < 400 || c.status > 600)) {
            if ((b = e.fix(b, !0, a)) && d) {
              var b = b.replace(/url\(\s*?((?:"|')?)(.+?)\1\s*?\)/gi, (b, a, c) => (/^([a-z]{3,10}:|#)/i.test(c) ? b : /^\/\//.test(c) ? `url("${f}${c}")` : /^\//.test(c) ? `url("${h}${c}")` : /^\?/.test(c) ? `url("${k}${c}")` : `url("${d}${c}")`));
              var n = d.replace(/([\\\^\$*+[\]?{}.=!:(|)])/g, '\\$1');
              var b = b.replace(RegExp(`\\b(behavior:\\s*?url\\('?"?)${n}`, 'gi'), '$1');
            }
            n = document.createElement('style');
            n.textContent = `/*# sourceURL=${a.getAttribute('href')} */\n/*@ sourceURL=${a.getAttribute('href')} */\n${b}`;
            n.media = a.media;
            n.disabled = a.disabled;
            n.setAttribute('data-href', a.getAttribute('href'));
            a.id && (n.id = a.id);
            g.insertBefore(n, a);
            g.removeChild(a);
            n.media = a.media;
          }
        };
        try { c.open('GET', b), c.send(null); } catch (p) { typeof XDomainRequest !== 'undefined' && (c = new XDomainRequest(), c.onerror = c.onprogress = function () {}, c.onload = l, c.open('GET', b), c.send(null)); }
        a.setAttribute('data-inprogress', '');
      },
      styleElement(a) {
        if (!a.hasAttribute('data-noprefix')) {
          const b = a.disabled;
          a.textContent = e.fix(a.textContent, !0, a);
          a.disabled = b;
        }
      },
      styleAttribute(a) {
        var b = a.getAttribute('style');
        var b = e.fix(b, !1, a);
        a.setAttribute('style', b);
      },
      process() {
        m('link[rel="stylesheet"]:not([data-inprogress])').forEach(StyleFix.link);
        m('style').forEach(StyleFix.styleElement);
        m('[style]').forEach(StyleFix.styleAttribute);
      },
      register(a, b) {
        (e.fixers = e.fixers || []).splice(void 0 === b ? e.fixers.length : b, 0, a);
      },
      fix(a, b, d) {
        if (e.fixers) {
          for (let f = 0; f < e.fixers.length; f++) {
            a = e.fixers[f](a, b, d) || a;
          }
        }
        return a;
      },
      camelCase(a) { return a.replace(/-([a-z])/g, (b, a) => a.toUpperCase()).replace('-', ''); },
      deCamelCase(a) { return a.replace(/[A-Z]/g, (b) => `-${b.toLowerCase()}`); },
    };
    (function () {
      setTimeout(() => { m('link[rel="stylesheet"]').forEach(StyleFix.link); }, 10);
      document.addEventListener('DOMContentLoaded', StyleFix.process, !1);
    }());
  }
}());
(function (m) {
  function e(b, d, f, h, k) {
    b = a[b];
    b.length && (b = RegExp(`${d}(${b.join('|')})${f}`, 'gi'), k = k.replace(b, h)); return k;
  }
  if (window.StyleFix && window.getComputedStyle) {
    var a = window.PrefixFree = {
      prefixCSS(b, d, f) {
        const h = a.prefix; a.functions.indexOf('linear-gradient') > -1 && (b = b.replace(/(\s|:|,)(repeating-)?linear-gradient\(\s*(-?\d*\.?\d*)deg/ig, (b, a, d, f) => `${a + (d || '')}linear-gradient(${90 - f}deg`));
        b = e('functions', '(\\s|:|,)', '\\s*\\(', `$1${h}$2(`, b);
        b = e('keywords', '(\\s|:)', '(\\s|;|\\}|$)',
          `$1${h}$2$3`, b);
        b = e('properties', '(^|\\{|\\s|;)', '\\s*:', `$1${h}$2:`, b);
        if (a.properties.length) {
          const k = RegExp(`\\b(${a.properties.join('|')})(?!:)`, 'gi');
          b = e('valueProperties', '\\b', ':(.+?);', (a) => a.replace(k, `${h}$1`), b);
        }
        d && (b = e('selectors', '', '\\b', a.prefixSelector, b), b = e('atrules', '@', '\\b', `@${h}$1`, b));
        b = b.replace(RegExp(`-${h}`, 'g'), '-');
        return b = b.replace(/-\*-(?=[a-z]+)/gi, a.prefix);
      },
      property(b) { return (a.properties.indexOf(b) >= 0 ? a.prefix : '') + b; },
      value(b, d) {
        b = e('functions', '(^|\\s|,)', '\\s*\\(', `$1${a.prefix}$2(`, b);
        b = e('keywords', '(^|\\s)', '(\\s|$)', `$1${a.prefix}$2$3`, b);
        a.valueProperties.indexOf(d) >= 0 && (b = e('properties', '(^|\\s|,)', '($|\\s|,)', `$1${a.prefix}$2$3`, b));
        return b;
      },
      prefixSelector(b) { return a.selectorMap[b] || b; },
      prefixProperty(b, d) { const f = a.prefix + b; return d ? StyleFix.camelCase(f) : f; },
    };
    (function () {
      const b = {};
      const d = [];
      let f = getComputedStyle(document.documentElement, null);
      const h = document.createElement('div').style;
      const k = function (a) {
        if (a.charAt(0)
            === '-') {
          d.push(a);
          a = a.split('-'); let c = a[1]; for (b[c] = ++b[c] || 1; a.length > 3;) a.pop(), c = a.join('-'), StyleFix.camelCase(c) in h && d.indexOf(c) === -1 && d.push(c);
        }
      };
      if (f && f.length > 0) for (var g = 0; g < f.length; g++) k(f[g]);
      else for (var c in f) k(StyleFix.deCamelCase(c));
      var g = 0;
      let e; let
        p;
      for (p in b) f = b[p], g < f && (e = p, g = f);
      a.prefix = `-${e}-`;
      a.Prefix = StyleFix.camelCase(a.prefix);
      a.properties = [];
      for (g = 0; g < d.length; g++) c = d[g], c.indexOf(a.prefix) === 0 && (e = c.slice(a.prefix.length), StyleFix.camelCase(e) in h || a.properties.push(e));
      !(a.Prefix != 'Ms' || 'transform' in h || 'MsTransform' in h) && 'msTransform' in h && a.properties.push('transform', 'transform-origin');
      a.properties.sort();
    }());
    (function () {
      function b(a, b) {
        e[b] = '';
        e[b] = a; return !!e[b];
      }
      const d = {
        'linear-gradient': { property: 'backgroundImage', params: 'red, teal' }, calc: { property: 'width', params: '1px + 5%' }, element: { property: 'backgroundImage', params: '#foo' }, 'cross-fade': { property: 'backgroundImage', params: 'url(a.png), url(b.png), 50%' }, 'image-set': { property: 'backgroundImage', params: 'url(a.png) 1x, url(b.png) 2x' },
      };
      d['repeating-linear-gradient'] = d['repeating-radial-gradient'] = d['radial-gradient'] = d['linear-gradient'];
      const f = {
        initial: 'color', grab: 'cursor', grabbing: 'cursor', 'zoom-in': 'cursor', 'zoom-out': 'cursor', box: 'display', flexbox: 'display', 'inline-flexbox': 'display', flex: 'display', 'inline-flex': 'display', grid: 'display', 'inline-grid': 'display', 'max-content': 'width', 'min-content': 'width', 'fit-content': 'width', 'fill-available': 'width', 'contain-floats': 'width',
      };
      a.functions = [];
      a.keywords = [];
      var e = document.createElement('div').style;
      let k;
      for (k in d) {
        var g = d[k];
        var c = g.property;
        var g = `${k}(${g.params})`; !b(g, c) && b(a.prefix + g, c) && a.functions.push(k);
      }
      for (const l in f) c = f[l], !b(l, c) && b(a.prefix + l, c) && a.keywords.push(l);
    }());
    (function () {
      function b(a) { h.textContent = `${a}{}`; return !!h.sheet.cssRules.length; }
      let d = {
        ':any-link': null,
        '::backdrop': null,
        ':fullscreen': null,
        ':full-screen': ':fullscreen',
        '::placeholder': null,
        ':placeholder': '::placeholder',
        '::input-placeholder': '::placeholder',
        ':input-placeholder': '::placeholder',
        ':read-only': null,
        ':read-write': null,
        '::selection': null,
      };
      const e = { keyframes: 'name', viewport: null, document: 'regexp(".")' };
      a.selectors = [];
      a.selectorMap = {};
      a.atrules = [];
      var h = m.appendChild(document.createElement('style'));
      let k;
      for (k in d) {
        const g = d[k] || k;
        const c = k.replace(/::?/, (b) => b + a.prefix); !b(g) && b(c) && (a.selectors.push(g), a.selectorMap[g] = c);
      }
      for (const l in e) d = `${l} ${e[l] || ''}`, !b(`@${d}`) && b(`@${a.prefix}${d}`) && a.atrules.push(l);
      m.removeChild(h);
    }());
    a.valueProperties = ['transition', 'transition-property', 'will-change'];
    m.className += ` ${a.prefix}`;
    StyleFix.register(a.prefixCSS);
  }
}(document.documentElement));